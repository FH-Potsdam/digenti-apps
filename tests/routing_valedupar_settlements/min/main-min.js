function OpenInNewTab(t){var e=window.open(t,"_blank");e.focus()}function generateUniqueID(){return"id"+(new Date).getTime().toString()+Math.random().toString(36).substr(2,16)}function getRandomInt(t,e){return Math.floor(Math.random()*(e-t))+t}function transformHEREgeometry(t){for(var e=0;e<t.length;e++){t[e]=t[e].split(",");for(var o=0;o<t[e].length;o++)t[e][o]=parseFloat(t[e][o]);var n=t[e][0];t[e][0]=t[e][1],t[e][1]=n}return t}function getGEOJSON(t){var e=JSON.stringify(t);OpenInNewTab("data:text/plain;charset=utf-8,"+encodeURIComponent(e))}function showValue(){var t=$("#range__slider").val();document.getElementById("range").innerHTML=t+" minutes"}function mapDraw(t){function e(t,e){var o=document.getElementById("switch"),n=document.createElement("div");o.appendChild(n);var r=document.createElement("input");r.type="checkbox",r.id=e,r.checked=!0,n.appendChild(r);var a=document.createElement("label");a.setAttribute("for",e),a.textContent=t,n.appendChild(a),r.addEventListener("change",function(t){s.setLayoutProperty(e,"visibility",t.target.checked?"visible":"none")})}function o(t,e){var o=t.geometry.coordinates;"routing"===currentMode&&(routing_history.push(o[1]+","+o[0]),n(o))}function n(t,e){function o(t){console.log(t)}function n(t){var e=t.response;console.log(e);var o={init:function(){return this.id=generateUniqueID(),this.geometry=transformHEREgeometry(e.route[0].shape),this.travelTime=e.route[0].summary.travelTime,this.path=lineFunction(this.geometry),this}}.init();routes_collection.push(o);var n=gRoutes.append("path").attr("class","route").attr("d",o.path).attr("stroke-width",2);routes_paths.push(n),compareRouteWithCollection(o,routes_collection),r()}var a={mode:"fastest;car",representation:"display",routeattributes:"waypoints,summary,shape,legs",maneuverattributes:"direction,action",waypoint0:t,waypoint1:e,returnelevation:"true"};router.calculateRoute(a,n,o)}function r(){for(var t=0;t<routes_paths.length;t++)routes_paths[t].attr("d",lineFunction(pathData));for(var t=0;t<routes_points.length;t++)routes_points[t].attr({cx:function(t){return a(t).x},cy:function(t){return a(t).y}});for(var t=0;t<routes_foot_paths.length;t++)routes_foot_paths[t].attr("d",lineFunction(pathFootData));for(var t=0;t<routes_foot_points.length;t++)routes_foot_points[t].attr({cx:function(t){return a(t).x},cy:function(t){return a(t).y}});d.attr({cx:function(t){return a(t.geometry.coordinates).x},cy:function(t){return a(t.geometry.coordinates).y}}),console.log("UPDATE");for(var e=0;e<isolines_collection.length;e++)"undefined"!=typeof isolines_collection[e]&&isolines_collection[e].attr("points",function(t){for(var e=[],o=0;o<t.length;o++)e.push([a(t[o]).x,a(t[o]).y].join(","));return e.join(" ")})}function a(t){return s.project(new mapboxgl.LngLat(+t[0],+t[1]))}function i(t){"DIGENTI"===t?s.setStyle("mapbox://styles/jorditost/cipseaugm001ycunimvr00zea"):"fos-outdoor"===t?s.setStyle("mapbox://styles/jorditost/cip44ooh90013cjnkmwmwd2ft"):s.setStyle("mapbox://styles/mapbox/"+t)}mapboxgl.accessToken="pk.eyJ1Ijoiam9yZGl0b3N0IiwiYSI6ImQtcVkyclEifQ.vwKrOGZoZSj3N-9MB6FF_A";var s=new mapboxgl.Map({container:"map",style:"mapbox://styles/mapbox/outdoors-v9",zoom:11,center:[-73.02,10.41]});s.addControl(new mapboxgl.Navigation),s.on("style.load",function(){var e=new mapboxgl.GeoJSONSource({data:t});s.addSource("places",e),s.addLayer({id:"places",interactive:!0,type:"circle",source:"places",paint:{"circle-radius":8,"circle-opacity":.3,"circle-color":"#f00"}}),$.each(map_data_sources,function(t,e){s.addSource(e[0],e[1])}),$.each(map_data_layers,function(t,e){s.addLayer(e)})});var c=s.getCanvasContainer(),u=d3.select(c).append("svg").attr("class","map-morphed"),l=d3.select(c).append("svg").attr("class","map-features");gRoutes=l.append("g").attr("class","routes");var p=u.append("g").attr("class","route-lines");isolinesGroup=l.append("g").attr("class","isolinesGroup");var d=l.append("g").attr("class","villages").selectAll("circle").data(t.features).enter().append("circle").attr({r:8}).attr("class","village").attr("data-id",function(){return generateUniqueID()}).on("click",function(t){d3.select(this).classed("selected",!0);var e=d3.select(this).attr("data-id");o(t,e)});lineFunction=d3.svg.line().x(function(t){return a(t).x}).y(function(t){return a(t).y}).interpolate("linear"),d.each(function(t,e){var o="10.471667,-73.25",r=t.geometry.coordinates[1]+","+t.geometry.coordinates[0];n(o,r)}),s.on("viewreset",r),s.on("movestart",function(){l.classed("hidden",!0)}),s.on("moveend",function(){r(),l.classed("hidden",!1)}),r();var f=document.getElementById("basemap_select"),h=f.options;f.onchange=function(){var t=h[f.selectedIndex].value;i(t)}}function getOverlappingGeometry(t,e){for(var o=[],n=0;n<t.length;n++)for(var r=0;r<e.length;r++)t[n].equals(e[r])&&o.push(t[n]);return o}function compareRouteWithCollection(t,e){if(e.length>1)for(var o=0;o<e.length;o++)if(t.id!==e[o].id){var n=getOverlappingGeometry(t.geometry,e[o].geometry);if(n.length>0){var r=gRoutes.append("path").attr("class","route").attr("d",lineFunction(n)).attr("stroke-width",8);routes_paths.push(r)}}}Array.prototype.equals&&console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."),Array.prototype.equals=function(t){if(!t)return!1;if(this.length!=t.length)return!1;for(var e=0,o=this.length;o>e;e++)if(this[e]instanceof Array&&t[e]instanceof Array){if(!this[e].equals(t[e]))return!1}else if(this[e]!==t[e])return!1;return!0},Object.defineProperty(Array.prototype,"equals",{enumerable:!1});var platform=new H.service.Platform({app_id:"EOg7UyuSFbPF0IG5ANjz",app_code:"iRnqNl0dyzX_8FOlchD0ZQ"}),router=platform.getRoutingService(),enterpriseRouter=platform.getEnterpriseRoutingService();showValue(),$.fn.d3Click=function(){this.each(function(t,e){var o=new MouseEvent("click");e.dispatchEvent(o)})};var linePadding=15;d3.json("../../data/places_aoi.json",function(t,e){mapDraw(e)});var routes_points=[],routes_paths=[],lines_paths=[],routes_foot_points=[],routes_foot_paths=[],routing_history=[],pathData,pathFootData,routes_collection=[],gRoutes,lineFunction,currentMode,isoline,isolines_collection=[],isolinesGroup,map_data_sources=[],map_data_layers=[];